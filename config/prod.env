# Environment that sets up a system that's similar to what Mozilla runs
# in production.
#
# It has a web process that handles incoming breakpad crashes via HTTP and
# saves them to the filesystem in crashes/.
#
# Then there's a crashmover process that looks at that diretory and saves
# crashes to fakes3 and notifies rabbitmq.

application=collector.collector_app.CollectorApp
storage.crashstorage_class=collector.external.fs.crashstorage.FSTemporaryStorage
web_server.wsgi_server_class=collector.webapi.servers.WSGIServer

logging.stderr_error_logging_level=10
resource.logging.stderr_error_logging_level=10

resource.fs.fs_root=/crashes

# access key set up in fakes3 container
resource.boto.access_key=fakes3
resource.boto.bucket_name=prod-crashes
resource.boto.keybuilder_class=collector.external.boto.connection_context.DatePrefixKeyBuilder
resource.boto.prefix=None
resource.boto.resource_class=collector.external.boto.connection_context.HostPortS3ConnectionContext
resource.boto.host=fakes3
resource.boto.port=4569
resource.boto.calling_format=boto.s3.connection.OrdinaryCallingFormat

resource.rabbitmq.filter_on_legacy_processing=True
resource.rabbitmq.host=rabbitmq
resource.rabbitmq.routing_key=collector.normal
resource.rabbitmq.virtual_host=rabbitvhost

resource.statsd.statsd_host=statsd

# secret access key set up in fakes3 container
secrets.boto.secret_access_key=whatever

secrets.rabbitmq.rabbitmq_password=rabbitpwd
secrets.rabbitmq.rabbitmq_user=rabbituser

# save to s3, then notify on rabbitmq
destination.crashstorage_class=collector.external.crashstorage_base.PolyCrashStorage
# Note: The actual values of this don't matter as long as the number is the same.
destination.storage_classes=collector.external.boto.crashstorage.BotoS3CrashStorage,collector.external.rabbitmq.crashstorage.RabbitMQCrashStorage,collector.external.statsd.statsd_base.StatsdCounter

# BotoS3CrashStorage
destination.storage0.active_list=save_raw_crash
destination.storage0.benchmark_tag=S3BenchmarkWrite
destination.storage0.crashstorage_class=collector.external.statsd.statsd_base.StatsdBenchmarkingWrapper
destination.storage0.filter_on_legacy_processing=True
destination.storage0.statsd_prefix=crashmover.s3
destination.storage0.wrapped_object_class=collector.external.boto.crashstorage.BotoS3CrashStorage

# RabbitMQCrashStorage
destination.storage1.benchmark_tag=S3BenchmarkWrite
destination.storage1.crashstorage_class=collector.external.rabbitmq.crashstorage.RabbitMQCrashStorage
destination.storage1.filter_on_legacy_processing=True
destination.storage1.statsd_prefix=crashmover.rabbitmq
destination.storage1.wrapped_object_class=collector.external.rabbitmq.crashstorage.RabbitMQCrashStorage

# Statsd
destination.storage2.active_list=save_raw_crash
destination.storage2.crashstorage_class=collector.external.statsd.statsd_base.StatsdCounter
destination.storage2.statsd_prefix=crashmover

# FIXME: no clue if we need these
producer_consumer.maximum_queue_size=24
producer_consumer.number_of_threads=12

source.crashstorage_class=collector.external.fs.crashstorage.FSTemporaryStorage
